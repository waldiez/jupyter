[build-system]
requires = [
    "hatchling>=1.27.0",
    "jupyterlab>=4.0.0,<5",
    "hatch-nodejs-version==0.4.0"
]
build-backend = "hatchling.build"

[project]
name = "waldiez_jupyter"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.10,<3.14"
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: Apache Software License",
    "Framework :: Jupyter",
    "Framework :: Jupyter :: JupyterLab",
    "Framework :: Jupyter :: JupyterLab :: 4",
    "Framework :: Jupyter :: JupyterLab :: Extensions",
    "Framework :: Jupyter :: JupyterLab :: Extensions :: Prebuilt",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Code Generators",
    "Typing :: Typed",
]
dependencies = [
    "ipywidgets==8.1.7",
    "jupyter_server>=2.0.1,<3",
    "pathvalidate==3.3.1",
    "waldiez @ git+https://github.com/waldiez/waldiez.git@dev",
]
dynamic = ["version", "description", "authors", "urls", "keywords"]

[project.optional-dependencies]
test = [
    "coverage==7.10.6",
    "filelock==3.19.1",
    "pytest==8.4.2",
    "pytest-datadir==1.8.0",
    "pytest-cov==7.0.0",
    "pytest-html==4.1.1",
    "pytest-sugar==1.1.1",
    "pytest-timeout==2.4.0",
    "pytest-tornasync==0.6.0.post2",
    "pytest-xdist==3.8.0",
    "pytest-jupyter[server]>=0.10.1",
]
dev = [
    "autoflake==2.3.1",
    "bandit==1.8.6",
    "black[jupyter]==25.1.0",
    "flake8==7.3.0",
    "isort==6.0.1",
    "jupyterlab==4.4.7",
    "mypy==1.17.1",
    "pre-commit==4.3.0",
    "pydocstyle==6.3.0",
    "pylint==3.3.8",
    "python-dotenv>=1.1.1",
    "ruff==0.13.0",
    "types-PyYAML==6.0.12.20250822",
    "toml==0.10.2; python_version <= '3.10'",
    "types-toml==0.10.8.20240310",
    "yamllint==1.37.1",
]

[tool.hatch.version]
source = "nodejs"

[tool.hatch.metadata]
  allow-direct-references = true

[tool.hatch.metadata.hooks.nodejs]
fields = ["description", "authors", "urls"]
contributors-as-maintainers = false

[tool.hatch.build.targets.sdist]
artifacts = ["waldiez_jupyter/labextension"]
exclude = [
  ".github",
  "examples"
]

[tool.hatch.build.targets.wheel.shared-data]
"waldiez_jupyter/labextension" = "share/jupyter/labextensions/@waldiez/jupyter"
"install.json" = "share/jupyter/labextensions/@waldiez/jupyter/install.json"
"jupyter-config/server-config" = "etc/jupyter/jupyter_server_config.d"
"jupyter-config/notebook-config" = "etc/jupyter/jupyter_notebook_config.d"

[tool.hatch.build.hooks.version]
path = "waldiez_jupyter/_version.py"

[tool.hatch.build.hooks.jupyter-builder]
dependencies = ["hatch-jupyter-builder>=0.5"]
build-function = "hatch_jupyter_builder.npm_builder"
ensured-targets = [
    "waldiez_jupyter/labextension/static/style.js",
    "waldiez_jupyter/labextension/package.json",
]
skip-if-exists = ["waldiez_jupyter/labextension/static/style.js"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
build_cmd = "build"
npm = ["yarn"]

[tool.hatch.build.hooks.jupyter-builder.editable-build-kwargs]
build_cmd = "install:extension"
npm = ["yarn"]
source_dir = "src"
build_dir = "waldiez_jupyter/labextension"

[tool.jupyter-releaser.options]
version_cmd = "hatch version"

[tool.jupyter-releaser.hooks]
before-build-npm = [
    "python -m pip install 'jupyterlab>=4.0.0,<5'",
    "yarn",
    "yarn cache clean",
    "yarn clean:all",
    "yarn build"
]
before-build-python = ["yarn clean:all"]

[tool.check-wheel-contents]
ignore = ["W002"]


# black
[tool.black]
line-length = 80
skip-string-normalization = true
include = '''
    \.pyi?$
'''
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | .local
  | _build
  | __init__.py
  | .local
  | build
  | dist
  | node_modules
  | examples
  | notebooks
)/
'''

# mypy
[tool.mypy]
files = '.'
platform = 'linux'
ignore_missing_imports = false
disallow_untyped_defs = false
warn_unused_ignores = true
# follow_imports = 'silent'  # not supported in vscode?
warn_redundant_casts = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
explicit_package_bases = true

exclude = [
  '.venv',
  '.local',
  'build',
  'dist',
  'examples',
  'notebooks',
  'node_modules',
  'waldiez_out',
]
plugins = []
# isort
[tool.isort]
profile = 'black'
skip = [
  '.venv',
  'node_modules',
  './.local',
  'build',
  'dist',
  'examples',
  'notebooks',
  'waldiez_out'
]
# known_local_folder = ["..."]
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 80

[tool.pydocstyle]
match-dir = '''
  [^!(.venv)]
  [^!(.local)]
  [^!(build)]
  [^!(dist)]
  [^!(node_modules)]
  [^!(examples)]
  [^!(notebooks)]
  [^!(waldiez_out)]
'''

# pylint
[tool.pylint.main]
load-plugins = [
  'pylint.extensions.mccabe',
  'pylint.extensions.redefined_variable_type',
  'pylint.extensions.broad_try_clause',
  'pylint.extensions.no_self_use',
  'pylint.extensions.docparams',
]

# ignored-modules = []
# generated-members = []
# source-roots = []
extension-pkg-whitelist = []
fail-under = 8.0
ignore = ["CVS"]
ignore-paths = [
  "^(.*)/.venv/*",
  "^(.*)/.local/.*",
  "^(.*)/build/*",
  "^(.*)/dist/*",
  "^(.*)/examples/*",
  "^(.*)/notebooks/*",
  "^(.*)/node_modules/*",
  "^(.*)/waldiez_out/*",
  ".venv/*",
  ".local/.*",
  "build/*",
  "dist/*",
  "examples/*",
  "notebooks/*",
  "node_modules/*",
  "^(.*)/(.*).pyi",
  "^(.*)/_version.py"
]
unsafe-load-any-extension = "no"

[tool.pylint.messages_control]
enable=["c-extension-no-member"]
[tool.pylint.format]
max-line-length=80
[tool.pylint.similarities]
ignore-imports="yes"
ignore-signatures="yes"
min-similarity-lines=10
[tool.pylint.broad_try_clause]
max-try-statements=3
[tool.pylint.design]
max-args=11
max-attributes=11
max-positional-arguments=11
max-statements=50
[tool.pylint.string]
check-quote-consistency = true
check-str-concat-over-line-jumps = true
[tool.pylint.parameter_documentation]
accept-no-param-doc=false
accept-no-raise-doc=false
accept-no-return-doc=false
accept-no-yields-doc=false
# Possible choices: ['sphinx', 'epytext', 'google', 'numpy', 'default']
default-docstring-type = "numpy"
disable = [
  # "fixme",  # toggle to see/hide TO\DOs
]
# bandit
[tool.bandit]
exclude_dirs = [".venv", ".local", "build", "dist", "node_modules", "examples", "waldiez_out"]
# B104: bind to all interfaces (0.0.0.0)
# B110: allow pass on try/except
# B404: allow import subprocess
# B602, B603: allow shell=True (subprocess,popen)
skips = ['B104', 'B110', 'B404', 'B602', 'B603']
[tool.bandit.assert_used]
skips = ['*_test.py', '*/test_*.py']

# ruff
[tool.ruff]
line-length = 80
extend-exclude = [
  "**/.venv",
  "**/examples",
  "**/notebooks",
  "**/.local",
  "**/node_modules",
  "**/build",
  "**/dist",
  "**/waldiez_out",
]

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "Q"]
ignore = []
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
exclude = ["*.pyi"]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
line-ending = "lf"

# pytest
[tool.pytest.ini_options]
# asyncio_mode = 'auto'
# asyncio_default_fixture_loop_scope='session'
addopts = """
  -n 1 \
  --exitfirst \
  --capture=sys \
  --color=yes"""

# consider_namespace_packages = true
# pythonpath = []
filterwarnings = [
  "ignore::DeprecationWarning",
]
python_files = ["test_*.py", "*_test.py"]

# coverage
[tool.coverage.paths]
# source = []
[tool.coverage.run]
omit = []
[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
]
fail_under = 80
precision = 2
